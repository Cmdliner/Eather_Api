# models/user.py
import uuid
from .base import Base
from sqlalchemy import Column, String
from sqlalchemy.orm import relationship
from utils.user_roles import UserRoles


class User(Base):
    __tablename__ = "users"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    role = Column(String(20), default=UserRoles.user)
    email = Column(String(255), unique=True, index=True, nullable=False)
    hashed_password = Column(String(255), nullable=False)

    appointments = relationship("Appointment", back_populates="user")


#models/test.py
import uuid
from .base import Base
from sqlalchemy import Column, String, Float
from sqlalchemy.orm import relationship


class Test(Base):
    __tablename__ = "tests"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(50), index=True, unique=True)
    description = Column(String(255))
    price = Column(Float(4))
    appointments = relationship('Appointment', secondary='appointment_tests', back_populates='tests')


#models/appointment.py
import uuid
from .base import Base
from sqlalchemy import Column, ForeignKey, String, TEXT, TIMESTAMP, Float
from sqlalchemy.orm import relationship


class Appointment(Base):
    __tablename__ = "appointments"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String(36), ForeignKey("users.id"), nullable=False)
    patient_complaints = Column(TEXT, nullable=False)
    diagnosis = Column(TEXT, nullable=True)
    date = Column(TIMESTAMP(timezone=True))
    tests_price = Column(Float, nullable=False)
    

    user = relationship("User", back_populates="appointments")
    tests = relationship("Test", secondary="appointment_tests", back_populates="appointment")


#models/association.py
from sqlalchemy import Table, Column, String, ForeignKey
from .base import Base

appointment_tests = Table(
    "appointment_tests",
    Base.metadata,
    Column("appointment_id", String(36), ForeignKey("appointments.id")),
    Column("test_id", String(36), ForeignKey('tests.id'))
)
